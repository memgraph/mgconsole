name: CI

on: [push]

jobs:
  build_and_test_ubuntu:
    strategy:
     matrix:
        platform: [ubuntu-20.04]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install dependencies (Ubuntu 20.04)
      if: matrix.platform == 'ubuntu-20.04'
      run: |
        sudo apt install -y git cmake make gcc g++ libssl-dev # mgconsole deps
        sudo apt install -y libpython3.8 python3-pip # memgraph deps
        mkdir ~/memgraph
        curl -L https://memgraph.com/download/memgraph/v1.4.0/ubuntu-20.04/memgraph_1.4.0-community-1_amd64.deb > ~/memgraph/memgraph_1.4.0-community-1_amd64.deb
        sudo systemctl mask memgraph
        sudo dpkg -i ~/memgraph/memgraph_1.4.0-community-1_amd64.deb
    
    - uses: actions/checkout@v1
    - name: Install and test mgconsole
      run: |
        mkdir build
        cd build
        cmake ..
        make
        sudo make install
        ctest

  build_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch:
          - { mingw: "64", msys: x86_64, python: "x64"}
        python_version:
          - 3.6
          - 3.9
        mgversion:
          - 1.4.0
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.arch.python }}
      - run: python -m pip install -U pip wheel setuptools pytest pyopenssl

      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW${{ matrix.arch.mingw }}
          update: true
          install: git mingw-w64-${{ matrix.arch.msys }}-toolchain mingw-w64-${{ matrix.arch.msys }}-cmake mingw-w64-${{ matrix.arch.msys }}-openssl
      - name: Add mingw${{ matrix.arch.mingw }} to PATH
        run: |
          # First make sure python would resolve to the windows native python, not mingw one
          echo "C:/msys64/mingw${{ matrix.arch.mingw }}/bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
          echo "${{ env.pythonLocation }}" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

      #- uses: Vampire/setup-wsl@v1
        #with:
            #distribution: Ubuntu-20.04
      #- name: Download and install Memgraph under WSL
        #shell: wsl-bash {0} # root shell
        #run: |
          #sudo apt update
          #sudo apt upgrade -y
          #sudo apt install -y libpython3.8 python3-pip # memgraph deps
          #mkdir ~/memgraph
          #curl -L https://download.memgraph.com/memgraph/v${{matrix.mgversion}}/ubuntu-20.04/memgraph_${{matrix.mgversion}}-community-1_amd64.deb --output ~/memgraph/memgraph-community.deb
          #sudo systemctl mask memgraph
          #dpkg -i ~/memgraph/memgraph-community.deb

      - uses: actions/checkout@v1
      - name: Install and test mgconsole
        run: |
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" ..
          make
          make install
          #ctest

      - name: Save mgconsole Windows build
        uses: actions/upload-artifact@v2
        with:
          name: "MGConsole Windows build"
          path: build/src/mgconsole.exe
