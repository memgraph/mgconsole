name: CI

on: [push]

jobs:
  build_and_test_ubuntu:
    strategy:
     matrix:
        platform: [ubuntu-20.04]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install dependencies (Ubuntu 20.04)
      if: matrix.platform == 'ubuntu-20.04'
      run: |
        sudo apt install -y git cmake make gcc g++ libssl-dev # mgconsole deps
        sudo apt install -y libpython3.8 python3-pip # memgraph deps
        mkdir ~/memgraph
        curl -L https://memgraph.com/download/memgraph/v1.4.0/ubuntu-20.04/memgraph_1.4.0-community-1_amd64.deb > ~/memgraph/memgraph_1.4.0-community-1_amd64.deb
        sudo systemctl mask memgraph
        sudo dpkg -i ~/memgraph/memgraph_1.4.0-community-1_amd64.deb
    
    - uses: actions/checkout@v1
    - name: Install and test mgconsole
      run: |
        mkdir build
        cd build
        cmake ..
        make
        sudo make install
        ctest

  build_windows:
    runs-on: windows-latest
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-openssl
      - name: Add mingw64 to PATH
        run: |
          # First make sure python would resolve to the windows native python, not mingw one
          echo "C:/msys64/mingw64/bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
          echo "${{ env.pythonLocation }}" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
      - uses: actions/checkout@v1
      - name: Install mgconsole
        run: |
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ..
          make
          make install
      - name: Save mgconsole Windows build
        uses: actions/upload-artifact@v2
        with:
          name: "mgconsole Windows build"
          path: build/src/mgconsole.exe
          #ToDo(the-joksim):
          #  - add Windows e2e test

  build_apple:
    strategy:
      matrix:
        platform: [macos-10.15]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Set-up repository
        uses: actions/checkout@v2
      # NOTE: CI can't execute end2end tests because there is no way to run
      #       Memgraph on CI MacOS machines.
      - name: Build mgconsole
        run: |
          mkdir build
          cd build
          cmake -DOPENSSL_ROOT_DIR="$(brew --prefix openssl)" -DCMAKE_BUILD_TYPE=Release ..
          make
      - name: Save mgconsole MacOS build
        uses: actions/upload-artifact@v2
        with:
          name: "mgconsole MacOS build"
          path: build/src/mgconsole

