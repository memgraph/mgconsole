name: CI

on: 
  push:
  workflow_dispatch:

jobs:
  build_and_test_ubuntu:
    strategy:
      matrix:
        platform: [ubuntu-22.04]
        mg_version:
          - "2.7.0"
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install dependencies (Ubuntu 22.04)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt install -y git cmake make gcc g++ libssl-dev # mgconsole deps
          sudo apt install -y libpython3.10 python3-pip # memgraph deps
          mkdir ~/memgraph
          curl -L https://download.memgraph.com/memgraph/v${{ matrix.mg_version }}/ubuntu-22.04/memgraph_${{ matrix.mg_version }}-1_amd64.deb > ~/memgraph/memgraph_${{ matrix.mg_version }}-1_amd64.deb
          sudo systemctl mask memgraph
          sudo dpkg -i ~/memgraph/memgraph_${{ matrix.mg_version }}-1_amd64.deb

      - uses: actions/checkout@v4
      - name: Install and test mgconsole
        run: |
          mkdir build
          cd build
          cmake ..
          make
          sudo make install
          ctest
      - name: Save mgconsole test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "mgconsole_ctest.log"
          path: build/Testing/Temporary/LastTest.log 

  build_windows:
    runs-on: windows-latest
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            openssl
            git 
            mingw-w64-x86_64-toolchain 
            cmake 

      - name: Add mingw64 to PATH
        run: |
          # First make sure python would resolve to the windows native python, not mingw one
          echo "C:/msys64/mingw64/bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
          echo "${{ env.pythonLocation }}" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
      - uses: actions/checkout@v4
      - name: Install mgconsole
        run: |
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ..
          make
          make install
      - name: Save mgconsole Windows build
        uses: actions/upload-artifact@v4
        with:
          name: "mgconsole Windows build"
          path: build/src/mgconsole.exe
          #ToDo(the-joksim):
          #  - add Windows e2e test

  build_apple:
    strategy:
      matrix:
        platform: [macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Set-up repository
        uses: actions/checkout@v4
      # NOTE: CI can't execute end2end tests because there is no way to run
      #       Memgraph on CI MacOS machines.
      - name: Install openssl
        run: |
          brew update
          brew install openssl
      - name: Build mgconsole
        run: |
          mkdir build
          cd build
          cmake -DOPENSSL_ROOT_DIR="$(brew --prefix openssl)" -DCMAKE_BUILD_TYPE=Release ..
          make
      - name: Save mgconsole MacOS build
        uses: actions/upload-artifact@v4
        with:
          name: "mgconsole MacOS build"
          path: build/src/mgconsole
